from abc import ABC, abstractmethod\nfrom typing import Dict, List, Any, Optional, Generator\n\n\nclass BaseProvider(ABC):\n    \"\"\"Base abstract class for all LLM providers\"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        self.config = config or {}\n        self.api_key = self.config.get('api_key')\n        self.base_url = self.config.get('base_url')\n        self.model = self.config.get('model')\n        self.timeout = self.config.get('timeout', 30)\n        \n    @abstractmethod\n    def chat_completion(self, messages: List[Dict[str, str]], **kwargs) -> Dict[str, Any]:\n        \"\"\"Generate chat completion\"\"\"\n        pass\n    \n    @abstractmethod  \n    def stream_completion(self, messages: List[Dict[str, str]], **kwargs) -> Generator[Dict[str, Any], None, None]:\n        \"\"\"Generate streaming chat completion\"\"\"\n        pass\n    \n    @abstractmethod\n    def text_completion(self, prompt: str, **kwargs) -> Dict[str, Any]:\n        \"\"\"Generate text completion\"\"\"\n        pass\n    \n    @abstractmethod\n    def get_available_models(self) -> List[str]:\n        \"\"\"Get list of available models\"\"\"\n        pass\n    \n    @abstractmethod\n    def validate_config(self) -> bool:\n        \"\"\"Validate provider configuration\"\"\"\n        pass\n    \n    def format_messages(self, messages: List[Dict[str, str]]) -> List[Dict[str, str]]:\n        \"\"\"Format messages to provider-specific format (can be overridden)\"\"\"\n        return messages\n    \n    def handle_error(self, error: Exception) -> Dict[str, Any]:\n        \"\"\"Handle provider-specific errors\"\"\"\n        return {\n            \"error\": str(error),\n            \"provider\": self.__class__.__name__,\n            \"success\": False\n        }