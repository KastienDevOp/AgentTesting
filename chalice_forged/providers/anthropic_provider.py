import requests\nimport json\nfrom typing import Dict, List, Any, Generator\nfrom chalice_forged.interfaces.base_provider import BaseProvider\n\n\nclass AnthropicProvider(BaseProvider):\n    \"\"\"Anthropic (Claude) API provider\"\"\"\n    \n    def __init__(self, config: Dict[str, Any] = None):\n        super().__init__(config)\n        self.base_url = self.base_url or \"https://api.anthropic.com/v1\"\n        self.model = self.model or \"claude-3-haiku-20240307\"\n        \n    def validate_config(self) -> bool:\n        return bool(self.api_key)\n    \n    def format_messages(self, messages: List[Dict[str, str]]) -> List[Dict[str, str]]:\n        \"\"\"Format messages for Anthropic API\"\"\"\n        formatted = []\n        for msg in messages:\n            if msg[\"role\"] == \"system\":\n                # Anthropic handles system messages differently\n                continue\n            formatted.append(msg)\n        return formatted\n    \n    def chat_completion(self, messages: List[Dict[str, str]], **kwargs) -> Dict[str, Any]:\n        try:\n            headers = {\n                \"x-api-key\": self.api_key,\n                \"Content-Type\": \"application/json\",\n                \"anthropic-version\": \"2023-06-01\"\n            }\n            \n            # Extract system message if present\n            system_message = \"\"\n            user_messages = []\n            for msg in messages:\n                if msg[\"role\"] == \"system\":\n                    system_message = msg[\"content\"]\n                else:\n                    user_messages.append(msg)\n            \n            data = {\n                \"model\": kwargs.get(\"model\", self.model),\n                \"messages\": user_messages,\n                \"max_tokens\": kwargs.get(\"max_tokens\", 1000),\n                \"temperature\": kwargs.get(\"temperature\", 0.7),\n                \"top_p\": kwargs.get(\"top_p\", 1.0)\n            }\n            \n            if system_message:\n                data[\"system\"] = system_message\n            \n            response = requests.post(\n                f\"{self.base_url}/messages\",\n                headers=headers,\n                json=data,\n                timeout=self.timeout\n            )\n            response.raise_for_status()\n            \n            result = response.json()\n            return {\n                \"success\": True,\n                \"content\": result[\"content\"][0][\"text\"],\n                \"usage\": result.get(\"usage\", {}),\n                \"model\": result.get(\"model\"),\n                \"provider\": \"Anthropic\"\n            }\n            \n        except Exception as e:\n            return self.handle_error(e)\n    \n    def stream_completion(self, messages: List[Dict[str, str]], **kwargs) -> Generator[Dict[str, Any], None, None]:\n        try:\n            headers = {\n                \"x-api-key\": self.api_key,\n                \"Content-Type\": \"application/json\",\n                \"anthropic-version\": \"2023-06-01\"\n            }\n            \n            # Extract system message if present\n            system_message = \"\"\n            user_messages = []\n            for msg in messages:\n                if msg[\"role\"] == \"system\":\n                    system_message = msg[\"content\"]\n                else:\n                    user_messages.append(msg)\n            \n            data = {\n                \"model\": kwargs.get(\"model\", self.model),\n                \"messages\": user_messages,\n                \"max_tokens\": kwargs.get(\"max_tokens\", 1000),\n                \"temperature\": kwargs.get(\"temperature\", 0.7),\n                \"stream\": True\n            }\n            \n            if system_message:\n                data[\"system\"] = system_message\n            \n            response = requests.post(\n                f\"{self.base_url}/messages\",\n                headers=headers,\n                json=data,\n                stream=True,\n                timeout=self.timeout\n            )\n            response.raise_for_status()\n            \n            for line in response.iter_lines():\n                if line:\n                    line = line.decode('utf-8')\n                    if line.startswith('data: '):\n                        try:\n                            data = json.loads(line[6:])\n                            if data.get('type') == 'content_block_delta':\n                                yield {\n                                    \"success\": True,\n                                    \"content\": data['delta']['text'],\n                                    \"provider\": \"Anthropic\"\n                                }\n                        except json.JSONDecodeError:\n                            continue\n                            \n        except Exception as e:\n            yield self.handle_error(e)\n    \n    def text_completion(self, prompt: str, **kwargs) -> Dict[str, Any]:\n        # Convert to chat format for Anthropic\n        messages = [{\"role\": \"user\", \"content\": prompt}]\n        return self.chat_completion(messages, **kwargs)\n    \n    def get_available_models(self) -> List[str]:\n        # Anthropic doesn't have a models endpoint, return known models\n        return [\n            \"claude-3-opus-20240229\",\n            \"claude-3-sonnet-20240229\", \n            \"claude-3-haiku-20240307\",\n            \"claude-2.1\",\n            \"claude-2.0\",\n            \"claude-instant-1.2\"\n        ]