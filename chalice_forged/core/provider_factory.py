from typing import Dict, Any, Type, Optional\nfrom chalice_forged.interfaces.base_provider import BaseProvider\nfrom chalice_forged.providers.openai_provider import OpenAIProvider\nfrom chalice_forged.providers.anthropic_provider import AnthropicProvider\nfrom chalice_forged.providers.google_provider import GoogleProvider\nfrom chalice_forged.providers.mistral_provider import MistralProvider\nfrom chalice_forged.providers.ollama_provider import OllamaProvider\nfrom chalice_forged.providers.huggingface_provider import HuggingFaceProvider\nfrom chalice_forged.providers.cohere_provider import CohereProvider\n\n\nclass ProviderFactory:\n    \"\"\"Factory class for creating LLM provider instances\"\"\"\n    \n    _providers: Dict[str, Type[BaseProvider]] = {\n        \"openai\": OpenAIProvider,\n        \"anthropic\": AnthropicProvider,\n        \"google\": GoogleProvider,\n        \"mistral\": MistralProvider,\n        \"ollama\": OllamaProvider,\n        \"huggingface\": HuggingFaceProvider,\n        \"cohere\": CohereProvider,\n    }\n    \n    @classmethod\n    def create_provider(cls, provider_name: str, config: Dict[str, Any] = None) -> BaseProvider:\n        \"\"\"\n        Create a provider instance by name\n        \n        Args:\n            provider_name: Name of the provider (e.g., 'openai', 'anthropic')\n            config: Configuration dictionary for the provider\n            \n        Returns:\n            BaseProvider instance\n            \n        Raises:\n            ValueError: If provider name is not supported\n        \"\"\"\n        provider_name = provider_name.lower()\n        \n        if provider_name not in cls._providers:\n            available = \", \".join(cls._providers.keys())\n            raise ValueError(f\"Unsupported provider '{provider_name}'. Available providers: {available}\")\n        \n        provider_class = cls._providers[provider_name]\n        return provider_class(config or {})\n    \n    @classmethod\n    def register_provider(cls, name: str, provider_class: Type[BaseProvider]) -> None:\n        \"\"\"\n        Register a new provider class\n        \n        Args:\n            name: Name to register the provider under\n            provider_class: Provider class that inherits from BaseProvider\n        \"\"\"\n        if not issubclass(provider_class, BaseProvider):\n            raise ValueError(\"Provider class must inherit from BaseProvider\")\n        \n        cls._providers[name.lower()] = provider_class\n    \n    @classmethod\n    def get_available_providers(cls) -> list[str]:\n        \"\"\"Get list of all available provider names\"\"\"\n        return list(cls._providers.keys())\n    \n    @classmethod\n    def is_provider_available(cls, provider_name: str) -> bool:\n        \"\"\"Check if a provider is available\"\"\"\n        return provider_name.lower() in cls._providers\n\n\nclass LLMClient:\n    \"\"\"Main client for interacting with LLM providers\"\"\"\n    \n    def __init__(self, provider_name: str, config: Dict[str, Any] = None):\n        \"\"\"\n        Initialize LLM client with a specific provider\n        \n        Args:\n            provider_name: Name of the provider to use\n            config: Provider configuration\n        \"\"\"\n        self.provider = ProviderFactory.create_provider(provider_name, config)\n        self.provider_name = provider_name\n        \n        if not self.provider.validate_config():\n            raise ValueError(f\"Invalid configuration for provider '{provider_name}'\")\n    \n    def chat(self, messages: list[Dict[str, str]], **kwargs) -> Dict[str, Any]:\n        \"\"\"Generate chat completion\"\"\"\n        return self.provider.chat_completion(messages, **kwargs)\n    \n    def stream_chat(self, messages: list[Dict[str, str]], **kwargs):\n        \"\"\"Generate streaming chat completion\"\"\"\n        return self.provider.stream_completion(messages, **kwargs)\n    \n    def complete(self, prompt: str, **kwargs) -> Dict[str, Any]:\n        \"\"\"Generate text completion\"\"\"\n        return self.provider.text_completion(prompt, **kwargs)\n    \n    def get_models(self) -> list[str]:\n        \"\"\"Get available models for this provider\"\"\"\n        return self.provider.get_available_models()\n    \n    def switch_provider(self, provider_name: str, config: Dict[str, Any] = None) -> None:\n        \"\"\"Switch to a different provider\"\"\"\n        self.provider = ProviderFactory.create_provider(provider_name, config)\n        self.provider_name = provider_name\n        \n        if not self.provider.validate_config():\n            raise ValueError(f\"Invalid configuration for provider '{provider_name}'\")\n\n\ndef create_client(provider_name: str, **config) -> LLMClient:\n    \"\"\"\n    Convenience function to create an LLM client\n    \n    Args:\n        provider_name: Name of the provider\n        **config: Provider configuration as keyword arguments\n        \n    Returns:\n        LLMClient instance\n    \"\"\"\n    return LLMClient(provider_name, config)